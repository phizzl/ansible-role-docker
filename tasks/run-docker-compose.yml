---
- name: Create destination directory
  file:
    path: "{{ compose.dest }}"
    state: directory

- name: Checkout docker setup
  git:
    repo: "{{ compose.repo }}"
    dest: "{{ compose.dest }}"
    accept_hostkey: "{{ compose.accept_hostkey| default('yes') }}"
    version: "{{ compose.version | default('HEAD') }}"
    key_file: "{{ compose.key_file |default('') }}"
  when: compose.repo is defined and compose.repo != ""

- name: Removing generated docker-compose file if exists
  file:
    path: "{{ compose.dest }}/docker-compose-inline-generated.yml"
    state: absent
  register: remove_inline_compose_return
  when: compose.inline == ""

- name: Create docker-compose YAML depending from inline config
  lineinfile:
    path: "{{ compose.dest }}/docker-compose-inline-generated.yml"
    create: true
    state: present
    line: "{{ compose.inline }}"
  register: create_inline_compose_return
  when: compose.inline is defined and compose.inline != ""

- name: Append docker-compose config when inline script is given
  set_fact:
    generated_compose:
      - "{{ compose.dest }}/docker-compose-inline-generated.yml"
  when: compose.inline is defined and compose.inline != ""

- name: Execute pre commands
  shell: "{{ item }}"
  args:
    chdir: "{{ compose.dest }}"
  loop: "{{ compose.pre_commands }}"
  environment:
    SETUP_STATE: "{{ compose.state | default('present') }}"
  when: compose.pre_commands is defined

- name: Stopping setup if generated compose file has changed
  docker_compose:
    project_src: "{{ compose.dest }}"
    state: "present"
    stopped: yes
    files: "{{ compose.files | default([]) + generated_compose }}"
  when: (create_inline_compose_return is defined and create_inline_compose_return.changed == True ) or (remove_inline_compose_return is defined and remove_inline_compose_return.changed == True)

- name: Running docker-compose
  docker_compose:
    project_src: "{{ compose.dest }}"
    state: "{{ compose.state | default('present') }}"
    files: "{{ compose.files | default([]) + generated_compose }}"
    build: "{{ compose.build | default('no') }}"

- name: Execute post cmd
  shell: "{{ item }}"
  args:
    chdir: "{{ compose.dest }}"
  loop: "{{ compose.post_commands }}"
  environment:
    SETUP_STATE: "{{ compose.state | default('present') }}"
  when: compose.post_commands is defined
